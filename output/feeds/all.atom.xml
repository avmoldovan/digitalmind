<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>digitalmind</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2015-02-13T00:00:00+01:00</updated><entry><title>Matrices and vectors</title><link href="/post/matrices-and-vectors" rel="alternate"></link><updated>2015-02-13T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2015-02-13:post/matrices-and-vectors</id><summary type="html">&lt;p&gt;This is an introduction to matrices and vectors and basic operations on them.
&lt;!-- If you wanted to read about the enslavement of a human race by the malevolent machines - wait 20-30 years and read /r/worldnews. --&gt;&lt;/p&gt;
&lt;div class="panel"&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="#matrices"&gt; Matrices&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#vectors"&gt; Vectors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#addition-and-subtraction"&gt; Addition and subtraction &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#scalar-multiplication-and-division"&gt; Scalar multiplication and division &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#dot-product"&gt; Dot product &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#matrix-multiplication"&gt; Matrix multiplication &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#inversion"&gt; Inversion &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#identity-matrix"&gt; Identity matrix &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#transpose"&gt; Transpose &lt;/a&gt;&lt;/li&gt;       
    &lt;!-- &lt;li&gt;&lt;a href="#resources"&gt; Other Resources&lt;/a&gt;&lt;/li&gt;  --&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span id="matrices"&gt;&lt;/p&gt;
&lt;h3&gt;Matrices&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Matrix&lt;/strong&gt; is just a convention for representing the data that is very useful for solving all kinds of problems. Yes, just that. If you wanted to read about the virtual reality built by the malevolent machines for the purposes of enslaving the human race - wait 20-30 years and read /r/worldnews.&lt;/p&gt;
&lt;!-- **Matrices** are just a convention for representing the data that is very useful for solving all kinds of problems. --&gt;

&lt;!-- If you're disappointed that it isn't a virtual reality built by machines to enslave human race... --&gt;

&lt;p&gt;For example, matrices can be used to represent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear equations.&lt;/li&gt;
&lt;li&gt;Pixels on a screen (useful for computer graphics)&lt;/li&gt;
&lt;li&gt;Points in a coordinate space.&lt;/li&gt;
&lt;li&gt;The training data for a Machine Learning problem.&lt;/li&gt;
&lt;li&gt;Many other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A matrix looks like a table of numbers within square brackets. For example this is a matrix:&lt;/p&gt;
&lt;p&gt;$$
A
=
\begin{bmatrix}
1 &amp;amp; 42  &amp;amp; 6 \cr
0 &amp;amp; 13  &amp;amp; 4 \cr
2 &amp;amp; 8 &amp;amp; 15 \cr
16 &amp;amp; 23 &amp;amp; 32 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;This matrix has 4 &lt;strong&gt;rows&lt;/strong&gt; and 3 &lt;strong&gt;columns&lt;/strong&gt;, therefore it is called 4x3 ("4 by 3") matrix.
The number of rows/columns a matrix as is called it's "&lt;strong&gt;dimensions&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;If you want to refer to a specific &lt;strong&gt;element&lt;/strong&gt;("entry") of a matrix, for example a number in a 3rd row, 2nd column, you can do it like this:&lt;/p&gt;
&lt;p&gt;$$
A_{3,2} = 8
$$&lt;/p&gt;
&lt;p&gt;$ A_{ij} $ is an element of a matrix , in the $ i^{th} $ row, $ j^{th} $ column.&lt;/p&gt;
&lt;p&gt;&lt;span id="vectors"&gt;&lt;/p&gt;
&lt;h3&gt;Vectors&lt;/h3&gt;
&lt;p&gt;Vector is a special case of a matrix, a matrix that has only one row or one column(nx1, or 1xn matrix).
&lt;!-- vector is one-dimensional matrix --&gt;&lt;/p&gt;
&lt;p&gt;Matrices with only one row are called &lt;strong&gt;row vectors&lt;/strong&gt;, and the ones that have only one column are called &lt;strong&gt;column vectors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is a 3-dimensional column vector:&lt;/p&gt;
&lt;p&gt;$$
\vec{y} =
\begin{bmatrix}
23 \cr
31 \cr
42
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;$ \vec{y}_i $ is an $ i^{th} $ element of a vector. For example $ \vec{y}_2 = 31 $.&lt;/p&gt;
&lt;!--
Sometimes vectors are 1-indexed(numbers of elements start with 1):
$$
\vec{y} =
\begin{bmatrix}
y_1 \cr
y_2 \cr
y_3 \cr
y_4
\end{bmatrix}
$$

and sometimes they're 0-indexed:
$$
\vec{y} =
\begin{bmatrix}
y_0 \cr
y_1 \cr
y_2 \cr
y_3
\end{bmatrix}
$$

In math 1-indexed vectors are more common, but in ML 0-indexed are more convenient.

In my math articles I'll use 1-indexed vectors.
--&gt;

&lt;p&gt;By convention, capital letters usually refer to matrices, and lowercase letters are used for vectors.&lt;/p&gt;
&lt;h2&gt;Basic operations  &lt;!-- on matrices --&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span id="addition-and-subtraction"&gt;&lt;/p&gt;
&lt;h3&gt;Addition and subtraction&lt;/h3&gt;
&lt;p&gt;To add matrices together you simply add up the corresponding elements one at a time.&lt;/p&gt;
&lt;!-- &lt;div class="bg-no-frame"&gt; --&gt;

&lt;p&gt;$$
\begin{bmatrix}
1 &amp;amp; 0 \cr
2 &amp;amp; 13 \cr
3 &amp;amp; 6
\end{bmatrix}
+
\begin{bmatrix}
4 &amp;amp; 7 \cr
8 &amp;amp; 0.5 \cr
22 &amp;amp; -1 \cr
\end{bmatrix}
=
\begin{bmatrix}
(1 + 4) &amp;amp; (0 + 7) \cr
(2 + 8) &amp;amp; (13 + 0.5) \cr
(3 + 22) &amp;amp; (6 - 1) \cr
\end{bmatrix}
=
\begin{bmatrix}
5 &amp;amp; 7 \cr
10 &amp;amp; 13.5 \cr
25 &amp;amp; 5 \cr
\end{bmatrix}
$$
&lt;!-- &lt;/div&gt; --&gt;&lt;/p&gt;
&lt;p&gt;Because vectors are just special cases of matrices, the same applies to them.&lt;/p&gt;
&lt;p&gt;Subtraction is the same, you simply subtract the corresponding elements.&lt;/p&gt;
&lt;p&gt;You can only add/subtract matrices of the same dimension.&lt;/p&gt;
&lt;!-- Just like with numbers, matrix addition/subtraction has the property of /??, A+B = B+A --&gt;

&lt;p&gt;&lt;span id="scalar-multiplication-and-division"&gt;&lt;/p&gt;
&lt;h3&gt;Scalar multiplication and division&lt;/h3&gt;
&lt;p&gt;To multiply a matrix by a number(scalar) you multiply each of it's elements by that number.&lt;/p&gt;
&lt;p&gt;$$
3 *
\begin{bmatrix}
1 &amp;amp; 0 \cr
2 &amp;amp; 5 \cr
3 &amp;amp; 1
\end{bmatrix}
=
\begin{bmatrix}
3 &amp;amp; 0 \cr
6 &amp;amp; 15 \cr
9 &amp;amp; 3 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Similar with division:
$$
\begin{bmatrix}
4 &amp;amp; 0 \cr
6 &amp;amp; 12
\end{bmatrix}
/2
=
\begin{bmatrix}
2 &amp;amp; 0 \cr
3 &amp;amp; 6 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;(because dividing by a number is the same as multiplying by 1 divided by a number.)&lt;/p&gt;
&lt;p&gt;&lt;span id="dot-product"&gt;&lt;/p&gt;
&lt;h3&gt;Dot product&lt;/h3&gt;
&lt;p&gt;Let's say we have 2 vectors:&lt;/p&gt;
&lt;p&gt;$$
\vec{a} =
\begin{bmatrix}
3 &amp;amp; 2 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;$$
\vec{b} =
\begin{bmatrix}
7 \cr
9 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;To find the dot product, you need to multiply the corresponding elements, and then add the results together:&lt;/p&gt;
&lt;p&gt;$$
3 * 7 + 2 * 9 = 39
$$&lt;/p&gt;
&lt;p&gt;&lt;span id="matrix-multiplication"&gt;&lt;/p&gt;
&lt;h3&gt;Matrix multiplication&lt;/h3&gt;
&lt;p&gt;Matrix multiplication is a little more elaborate than addition.&lt;/p&gt;
&lt;p&gt;Let's say we want to multiply matrices $A$ and $B$ to get the resulting matrix $C$.&lt;/p&gt;
&lt;div class="mathjax-align-left"&gt;
$$
A =
\begin{bmatrix}
\color{Lightseagreen}1 &amp; \color{Lightseagreen}2 \cr
\color{Purple}3 &amp; \color{Purple}4 \cr
\end{bmatrix}
$$

$$
B =
\begin{bmatrix}
\color{#CD5F5F}5 &amp; \color{Green}6 \cr
\color{#CD5F5F}7 &amp; \color{Green}8 \cr
\end{bmatrix}
$$

$$
C =
\begin{bmatrix}
c_{11} &amp; c_{12} \cr
c_{21} &amp; c_{22} \cr
\end{bmatrix}
=
?
$$
&lt;/div&gt;

&lt;!-- End align --&gt;

&lt;p&gt;To get the resulting elements of a matrix $C$ you need to find a dot product of a corresponding &lt;em&gt;row&lt;/em&gt; from the matrix $A$ and the &lt;em&gt;column&lt;/em&gt; from the matrix $B$.&lt;/p&gt;
&lt;p&gt;For example to find $c_{11}$, you calculate a dot product of the &lt;em&gt;first&lt;/em&gt; row of a matrix $A$ and a &lt;em&gt;first&lt;/em&gt; column of a matrix $B$.&lt;/p&gt;
&lt;div class="mathjax-align-left"&gt;
$$
c_{11} =
\color{Lightseagreen}1 * \color{#CD5F5F}5 + \color{Lightseagreen}2 * \color{#CD5F5F}7
= 19
$$

You can do the same for the rest of the elements:

$$
c_{12} =
\color{Lightseagreen}1 * \color{Green}6 + \color{Lightseagreen}2 * \color{Green}8
= 22
$$

$$
c_{21} =
\color{Purple}3 * \color{#CD5F5F}5 + \color{Purple}4 * \color{#CD5F5F}7 
= 43
$$

$$
c_{22} =
\color{Purple}3 * \color{Green}6 + \color{Purple}4 * \color{Green}8
= 50
$$

Now we put them together in a result:

$$
C =
\begin{bmatrix}
c_{11} &amp; c_{12} \cr
c_{21} &amp; c_{22} \cr
\end{bmatrix}
=
\begin{bmatrix}
19 &amp; 22 \cr
43 &amp; 50 \cr
\end{bmatrix}
$$

Here it all together, for clarity:

$$
\begin{bmatrix}
\color{Lightseagreen}1 &amp; \color{Lightseagreen}2 \cr
\color{Purple}3 &amp; \color{Purple}4 \cr
\end{bmatrix}
*
\begin{bmatrix}
\color{#CD5F5F}5 &amp; \color{Green}6 \cr
\color{#CD5F5F}7 &amp; \color{Green}8 \cr
\end{bmatrix}
=
\begin{bmatrix}
(\color{Lightseagreen}1 * \color{#CD5F5F}5 + \color{Lightseagreen}2 * \color{#CD5F5F}7) &amp; (\color{Lightseagreen}1 * \color{Green}6 + \color{Lightseagreen}2 * \color{Green}8) \cr
(\color{Purple}3 * \color{#CD5F5F}5 + \color{Purple}4 * \color{#CD5F5F}7) &amp; (\color{Purple}3 * \color{Green}6 + \color{Purple}4 * \color{Green}8) \cr
\end{bmatrix}
=
\begin{bmatrix}
19 &amp; 22 \cr
43 &amp; 50 \cr
\end{bmatrix}
$$

&lt;/div&gt;

&lt;!-- end align --&gt;

&lt;p&gt;Properties of matrix multiplication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can only multiply matrices when the number of columns of the first one equals the number of rows of the second one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiplying m x n matrix (m rows, n columns) by n x o matrix(n rows, o columns) will result in m x o matrix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike with addition, $A * B != B * A$, multiplication order matters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- unlike with addition, multiplication order matters. --&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt; multiply these 2 matrices:&lt;br /&gt;
  &lt;div class="mathjax-align-left"&gt;
    $$
    A =
    \begin{bmatrix}
    2 &amp;amp; -3 \cr
    7 &amp;amp; 5 \cr
    \end{bmatrix}
    $$
    $$
    B =
    \begin{bmatrix}
    10 &amp;amp; -8 \cr
    12 &amp;amp; -2 \cr
    \end{bmatrix}
    $$&lt;/p&gt;
&lt;p&gt;&lt;!-- $$ --&gt;
&lt;!-- C = --&gt;
&lt;!-- \begin{bmatrix} --&gt;
&lt;!-- c_{11} &amp; c_{12} \cr --&gt;
&lt;!-- c_{21} &amp; c_{22} \cr --&gt;
&lt;!-- \end{bmatrix} --&gt;
&lt;!-- = --&gt;
&lt;!-- ? --&gt;
&lt;!-- $$ --&gt;
&lt;/div&gt; &lt;!-- end align --&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="expand"&gt;[Show the Answer]&lt;/span&gt;&lt;br /&gt;
&lt;div class="description"&gt;
&lt;div class="mathjax-align-left"&gt;
$$
c_{11} =
\begin{bmatrix}
2 &amp;amp; -3 \cr
\end{bmatrix}
*
\begin{bmatrix}
10 \cr
12 \cr
\end{bmatrix}
=
(2 * 10) + (-3 * 12)
=
20 - 36
=
-16
$$&lt;/p&gt;
&lt;p&gt;$$
c_{12} =
\begin{bmatrix}
2 &amp;amp; -3 \cr
\end{bmatrix}
*
\begin{bmatrix}
-8 \cr
-2 \cr
\end{bmatrix}
=
(2 * -8) + (-3 * -2)
=
-16 + 6 
=
-10
$$&lt;/p&gt;
&lt;p&gt;$$
c_{21} =
\begin{bmatrix}
7 &amp;amp; 5 \cr
\end{bmatrix}
*
\begin{bmatrix}
10 \cr
12 \cr
\end{bmatrix}
=
(7 * 10) + (5 * 12)
=
70 + 60
=
130
$$&lt;/p&gt;
&lt;p&gt;$$
c_{22} =
\begin{bmatrix}
7 &amp;amp; 5 \cr
\end{bmatrix}
*
\begin{bmatrix}
-8 \cr
-2 \cr
\end{bmatrix}
=
(7 * -8) + (5 * -2)
=
-56 -10
=
-66
$$
$$
C =
\begin{bmatrix}
c_{11} &amp;amp; c_{12} \cr
c_{21} &amp;amp; c_{22} \cr
\end{bmatrix}
=
\begin{bmatrix}
-16 &amp;amp; -10 \cr
130 &amp;amp; -66 \cr
\end{bmatrix}
$$
&lt;/div&gt; &lt;!-- End align --&gt;
&lt;/div&gt; &lt;!-- End description --&gt;&lt;/p&gt;
&lt;!-- End Exercise  --&gt;

&lt;p&gt;&lt;span id="inversion"&gt;&lt;/p&gt;
&lt;h3&gt;Inversion&lt;/h3&gt;
&lt;p&gt;Now that we know how to add, subtract and multiply matrices, it's time to learn about the inversion, which is analogous to division. To learn that you will first need to understand a couple of concepts.&lt;/p&gt;
&lt;p&gt;When you multiply a number $x$ by $1$, you get the number $x$ itself. So here, $1$ is called the &lt;strong&gt;identity of x.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inverse of x&lt;/strong&gt; is a number which, when multiplied by $x$, produces identity.
For example ${1\over2}$ is an inverse of $2$, beause  ${1\over2} * 2 = 1$&lt;/p&gt;
&lt;p&gt;When you divide a real number by $x$, it is the same as multiplying it by  ${1\over x}$&lt;/p&gt;
&lt;p&gt;$$
3 / 2 = 3 * {1\over2}
$$&lt;/p&gt;
&lt;p&gt;In other words, dividing by a number is the same as multiplying by the inverse of it.&lt;/p&gt;
&lt;p&gt;So to "divide" by a matrix you need to multiply by it's inverse. &lt;/p&gt;
&lt;p&gt;&lt;span id="identity-matrix"&gt;&lt;/p&gt;
&lt;h3&gt;Identity matrix&lt;/h3&gt;
&lt;p&gt;Identity matrix ($I$), is a matrix such that:&lt;/p&gt;
&lt;p&gt;$$
I*A = A
$$&lt;/p&gt;
&lt;p&gt;Unlike other matrices, in the case of identity matrix the order of multiplication doesn't matter:&lt;/p&gt;
&lt;p&gt;$$
I * A = A * I
$$&lt;/p&gt;
&lt;p&gt;Identity matrix is analogous to 1 for real numbers.&lt;/p&gt;
&lt;p&gt;Identity matrix for any 3 by 3 matrix looks like so:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0 \cr
0 &amp;amp; 1 &amp;amp; 0 \cr
0 &amp;amp; 0 &amp;amp; 1 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Identity matrix for any 4 by 4 matrix looks like so:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 \cr
0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 \cr
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 \cr
0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Etcetera, you get the pattern. Onces in a diagonal from top left to bottom right, and the rest are zeros. That works for any n x n matrix.&lt;/p&gt;
&lt;p&gt;Here's an example for a general 2 x 2 matrix:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
1 &amp;amp; 0 \cr
0 &amp;amp; 1 \cr
\end{bmatrix}
*
\begin{bmatrix}
a &amp;amp; b \cr
c &amp;amp; d \cr
\end{bmatrix}
=
\begin{bmatrix}
(1 * a + 0 * c) &amp;amp; (1 * b + 0 * d) \cr
(0 * a + 1 * c) &amp;amp; (0 * b + 1 * d) \cr
\end{bmatrix}
=
\begin{bmatrix}
a &amp;amp; b \cr
c &amp;amp; d \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;h3&gt;Inverse matrix&lt;/h3&gt;
&lt;p&gt;Inverse matrix ($A^{-1}$), is a matrix such that:&lt;/p&gt;
&lt;p&gt;$$
A^{-1}*A = I
$$&lt;/p&gt;
&lt;p&gt;Calculating the inverse is a pretty long and messy process, it's easy enough to do for 2 x 2 matrix, but when dimensions get bigger, like 5 x 5, it becomes very hard for a human to do, so in practice you will end up using libraries that make computer to calculate it automatically for you.&lt;/p&gt;
&lt;p&gt;Only square matrices (m x m) have inverses.&lt;/p&gt;
&lt;p&gt;&lt;span id="transpose"&gt;&lt;/p&gt;
&lt;h3&gt;Transpose&lt;/h3&gt;
&lt;p&gt;Transpose is another type of matrix operations.&lt;/p&gt;
&lt;p&gt;Transpose is essentially "flipping" the matrix across it's diagnoal. To compute a transpose you take the rows of a matrix, and turn them into columns.&lt;/p&gt;
&lt;p&gt;$$
A =
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 \cr
4 &amp;amp; 5 &amp;amp; 6 \cr
7 &amp;amp; 8 &amp;amp; 9 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;$$
A^{T} =
\begin{bmatrix}
1 &amp;amp; 4 &amp;amp; 7 \cr
2 &amp;amp; 5 &amp;amp; 8 \cr
3 &amp;amp; 6 &amp;amp; 9 \cr
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;The other way to put it is that to get an element i,j of a transposed matrix, you take the element j,i from an original matrix:&lt;/p&gt;
&lt;p&gt;$$
A^{T}_{ij} = Aji
$$&lt;/p&gt;
&lt;div id="article-info"&gt;
&lt;hr/&gt;
&lt;!-- Author: &lt;a href="http://rationalfiction.io/users/rayalez"&gt;Ray Alez&lt;/a&gt; --&gt;

&lt;a style="float:right;"
href="https://github.com/raymestalez/dm/blob/master/content/math/matrices.md"&gt;Edit on GitHub&lt;/a&gt;
&lt;/div&gt;

&lt;!--
## Matrix vector multiplication

Multiplying matrix by a vector is a little more elaborate.

When you multiply matrix by a vector you get a vector as a result.
To get the first element of a vector you to take elements from the first **row** of a matrix and multiply them with corresponding elements from the vector **column**, and then add the results together. Then you repeat that process for each of the rows to get each of the elements of a vector.

$$
\begin{bmatrix}
1 &amp; 3 \cr
4 &amp; 0 \cr
2 &amp; 1
\end{bmatrix}
*
\begin{bmatrix}
1 \cr
5
\end{bmatrix}
=
\begin{bmatrix}
16 \cr
4 \cr
7 
\end{bmatrix}
$$

1 * 1 + 3 * 5 = 16  
4 * 1 + 0 * 5 = 4  
2 * 1 + 1 * 5 = 7  


$$
A * \vec{x} = \vec{y}
$$

To get $\vec{y}_{i}$, you multiply $A$'s $i^{th}$ row with elements of vector x, and add them up.

## Applying function to several features

Features:  
2104  
1416  
1534  
852

Function:

$$
h_\theta(x) = -40 + 0.25x
$$

Applying it to all the features at the same time:
$$
\begin{bmatrix}
1 &amp; 2104 \cr
1 &amp; 1416 \cr
1 &amp; 1534 \cr
1 &amp; 852
\end{bmatrix}
*
\begin{bmatrix}
-40 \cr
0.25
\end{bmatrix}
$$
The result of this multiplication will be a vector of $h_\theta()$ applied to all the features.

## Matrix matrix multiplication
$$
\begin{bmatrix}
1 &amp; 3 &amp; 2 \cr
4 &amp; 0 &amp; 1
\end{bmatrix}
*
\begin{bmatrix}
1 &amp; 3 \cr
0 &amp; 1 \cr
5 &amp; 2
\end{bmatrix}
=
\begin{bmatrix}
11 &amp; 10 \cr
9  &amp;  14
\end{bmatrix}
$$

Number of columns in the first matrix must equal to number of rows in the 2nd matrix.

Ith column of mmatrix C is obtained by multiplying A with the ith column of vector B.

## Applying several hypotheses to features

[![Applying several hypotheses to features]
(/images/math/applying-hypotheses-with-matrix-multiplication.png)](/images/math/applying-hypotheses-with-matrix-multiplication.png)


## Properties of matrix multiplication

not commutative - order matters

order of multiplication matters too  
3x5x2  
(is associative)

### Identity matrix

When you multiply a matrix by it you get the same matrix.

$I_{n*n}$

AI = IA

$$
\begin{bmatrix}
1 &amp; 0 &amp; 0 \cr
0 &amp; 1 &amp; 0 \cr
0 &amp; 0 &amp; 1 
\end{bmatrix}
$$
--&gt;

&lt;!--
## Inverting matrices

1 = "Identity" for real numbers.

Inverse of a number - when you multiply a number by it you get 1.

Inverse of a matrix - when you multiply a matrix by it's inverse you get an identity matrix.

$A^{-1}$


A*A^-1=A^-1A=I

## Transposing matrices

[![matrix-transpose]
(/images/math/matrix-transpose.png)](/images/math/matrix-transpose.png)

$B_{ij} = A_{ji}$


## Inverting matrices
A^-1 = (1/|A|)*Adj(A)

You get |A| of 3x3 matrix by multiplying each of it's elements by it's corresponding cofactor(thing in the same place in Adj(A))(?)
### Determinant

a b
c d 

|a d| - c - b

### Adjegate
flip accross the diagonal
--&gt;

&lt;!-- &lt;style&gt; --&gt;

&lt;!-- img { --&gt;

&lt;!-- width: 100%; --&gt;

&lt;!-- padding: 40px; --&gt;

&lt;!-- height: 40px; --&gt;

&lt;!-- background: url("/theme/img/bg.png"); --&gt;

&lt;!-- background-size:100%; --&gt;

&lt;!-- } --&gt;

&lt;!-- &lt;/style&gt; --&gt;

&lt;!-- Scripts --&gt;

&lt;!-- Expanding List --&gt;

&lt;script&gt;
function prepareList() {
  $('body').find('li:has(ul)')
    .click( function(event) {
        if (this == event.target) {
            $(this).toggleClass('expanded');
            $(this).children('ul').toggle('medium');
        }
        return false;
    })
    .addClass('collapsed');
    //.children('ul').hide();
  };

function prepareExpand() {
  $('.expand').click( function(event) {
        if (this == event.target) {
            $(this).parent().parent().find('.description').toggle('fast');
        }
        return false;
    }).parent().parent().find('.description').hide();
    //.addClass('collapsed');
    //.children('ul').hide();
};

$(document).ready( function() {
  //prepareList();
  prepareExpand();
  });
&lt;/script&gt;

&lt;style&gt;
.expand {
color: gray;
cursor: pointer;
}
&lt;!-- font-size: 12px;--&gt;
&lt;/style&gt;

&lt;!-- Align mathjax to the left --&gt;

&lt;style&gt;
.mathjax-align-left .MathJax_Display {
  text-align: left !important;
}
&lt;/style&gt;</summary></entry><entry><title>List of ML algorithms</title><link href="/post/machine-learning-algorithms" rel="alternate"></link><updated>2014-12-22T07:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-22:post/machine-learning-algorithms</id><summary type="html">&lt;!--
[TODO] Add brief descriptions/classification to each of the algorithms.
[TODO]Check out distilled as well
--&gt;

&lt;p&gt;This is the list of the most important things to learn first in ML and DL:&lt;/p&gt;
&lt;h2&gt;Algorithms&lt;/h2&gt;
&lt;h3&gt;Supervised&lt;/h3&gt;
&lt;p&gt;List of the most important machine learning algorithms to learn first:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Univariate and multivariate Linear regression with Gradient Descent&lt;/li&gt;
&lt;li&gt;Logistic regression&lt;/li&gt;
&lt;li&gt;Neural Networks (Perceptron &amp;gt; feedforward &amp;gt; with back propagation)&lt;/li&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;Support Vector Machines(= Kernel Methods)
  (Maximum Margin Classifier &amp;gt; Support Vector Classifier &amp;gt; SVMs)&lt;/li&gt;
&lt;li&gt;Decision Trees &amp;gt; Random Forests //Boosting AdaBoost //C4.5&lt;/li&gt;
&lt;li&gt;K-Nearest Neighbors&lt;/li&gt;
&lt;li&gt;Linear Discriminant Analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unsupervised&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Principal Component Analysis&lt;/li&gt;
&lt;li&gt;k-means clustering&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deep Learning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stacked Auto-encoders&lt;/li&gt;
&lt;li&gt;Restricted Boltzmann machines&lt;/li&gt;
&lt;li&gt;Deep Convolutional Neural Networks&lt;/li&gt;
&lt;li&gt;Deep Recurrent neural networks&lt;/li&gt;
&lt;li&gt;Deep Belief Networks (DBN)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- 
- singular value decomposition
- Locally Weighted Regression
- Q learning
- EM Expectation maximization
- Apriori
- First-Order Inductive Learning
--&gt;

&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;Python:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;scipy&lt;/li&gt;
&lt;li&gt;scikitlearn&lt;/li&gt;
&lt;li&gt;Theano&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ipython&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;li&gt;Latex&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
//Orange python?  
//matlab?  
//octave?  
//weka??  
--&gt;

&lt;!--
## Topics

- General overview, terms, into, background.
    - What is ML? Applications of ML
        - Types of Learning: supervised/unsupervised learning
    - classification/regression(difference)
- ML Algorithms
    - Supervised Learning
      - Linear Regression with one variable
          - Model Representation
          - Cost function
          - Gradient Descent
      - Linear Regression with multiple variables
          - Gradient descent for multiple vectors
          - Features and polynomial regression
          - Normal Equation
      - Logistic Reression
      - k-Nearest Neighbor
      - Decision Tree
      - Naive Bayesian Classifiers

      - Support Vector Machines
      - Random Forests

    - Unsupervised Learning
      - k-Means Clustering
      - Hierarchical Clustering
      - Self-Organizing Maps
      - Apriori Association
- Deep Learning
  - Perceptron
    - Linear Regression
  - Gradient Descent
  - Stochastic Gradient descent
  - Multilayer Perceptrons
  - Backpropogation
  - Hidden Layer Representations

  - Neural Networks: Representation and learning
      - Neurons
      - Model representation
      - Cost function
      - Backpropogation algorithm
      - Gradient checking
      - Random Initialization

  - Perceptron

  - Artificial Neural Networks Representation
  - General Regression Neural Networks
  - Feed-Forward Neural Networks
- Other/General ML
  - ML Systems design
    - Error  Analysis
  - Dimensionality Reduction
  - Anomaly Detection
  - Recommender Systems
--&gt;

&lt;!-- To Sort, other topics
- Neural networks:
  - Types of neurons,
  - Learning rules for binary,
  - linear and logistic neurons,
  - FeedForward Neural Networks (FFNN)
  - Backpropagation (BP),
  - BP with weight constraints.
  - Recurrent Neural Networks (RNN),
  - FFNN interpretation for RNN,
  - BP through time,
  - Exploding/Vanishing gradients.
- Energy-based models:
  - Hopfield Nets (HN),
  - Learning &amp; unlearning in HN,
  - HN with hidden units,
  - Simulated annealing,
  - Boltzmann machines (BM),
  - BM Learning algorithm.
- Deep Neural Networks:
  - Deep Boltzmann Machines (DBM),
  - Restricted Boltzmann Machines (RBM),
  - Contrastive Divergence and variants (PCD, CD_k),
  - Stacked RBMs for pre-training,
  - Discriminative finetuning using BP.
- Nonlinear Dimensionality Reduction:
  - Autoencoders (AE),
  - AE for document retrieval/visualization,
  - AE for semantic hashing
- Other:
  - Minibatch gradient descent,
  - Momentum method,
  - Adaptive Learning rates,
  - Limiting size of weights,
  - Weight decay,
  - Early stopping,
  - Noise as regularizer,
  - Dropouts,
  - Bagging/Averaging and Boosting,
  - Bias-variance tradeoff,
  - Implementation on GPGPUs. 
--&gt;</summary></entry><entry><title>Getting Started with Deep Learning - resources and roadmap</title><link href="/post/deep-learning" rel="alternate"></link><updated>2014-12-22T05:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-22:post/deep-learning</id><summary type="html">&lt;p&gt;This post is a collection of the best resources for getting into Deep Learning, &lt;!-- Machine Learning (specifically - Deep Learning for Computer Vision) --&gt;and the roadmap for studying it.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;h3&gt;Basic Math&lt;/h3&gt;
&lt;h4&gt;Calculus&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PL19E79A0638C8D449"&gt;Khan Academy Calculus videos&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/course/m2o2c2"&gt;Coursera Calculus course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MIT lectures on &lt;a href="http://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/index.htm"&gt;Multivariable Calculus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Linear Algebra&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLFD0EB975BA0CC1E0"&gt;Khan Academy Linear Algebra videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/"&gt;MIT linear algebra videos&lt;/a&gt; by Gilbert Strang&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cs.brown.edu/video/channels/coding-matrix-fall-2014/?page=2"&gt;Coding the Matrix&lt;/a&gt; - Brown University course on Linear Algebra for CS. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Probability and statistics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Khan Academy &lt;a href="http://www.youtube.com/playlist?list=PLC58778F28211FA19"&gt;Probability&lt;/a&gt; &amp;amp; &lt;a href="http://www.youtube.com/playlist?list=PL1328115D3D8A2566"&gt;Statistics&lt;/a&gt; videos  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-probability-science-mitx-6-041x#.VJfS2LQAKc"&gt;edx probability course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General Computer Science&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Algorithms coursera course &lt;a href="https://www.coursera.org/course/algo"&gt;part 1&lt;/a&gt; and &lt;a href="https://www.coursera.org/course/algo2"&gt;part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MIT course &lt;a href="https://www.youtube.com/watch?v=2Op3QLzMgSY&amp;amp;list=PLE18841CABEA24090#t=253"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
(based on &lt;a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871"&gt;SICP book&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Artificial Intelligence introduction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Book "&lt;a href="http://www.amazon.com/Artificial-Intelligence-Modern-Approach-Edition/dp/0136042597"&gt;Artificial Intelligence: A Modern Approach (AIMA)&lt;/a&gt;"  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCshmLD2MsyqAKBx8ctivb5Q/videos"&gt;Artificial Intelligence course&lt;/a&gt; from UC Berkeley(CS 188)  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General Machine Learning introduction&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Andrew Ng &lt;a href="https://www.coursera.org/course/ml"&gt;Machine Learning course&lt;/a&gt; on Coursera.&lt;br /&gt;
  And his &lt;a href="http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=ufldl"&gt;course on Deep learning &lt;/a&gt;
  And here's is the link to the &lt;a href="http://see.stanford.edu/see/lecturelist.aspx?coll=348ca38a-3a6d-4052-937d-cb017338d7b1"&gt;full course&lt;/a&gt; Ng taught at Stanford that his coursera course is based upon.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://class.coursera.org/machlearning-001/lecture/preview"&gt;Pedro Domingos ML course&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udacity.com/course/cs271"&gt;Udacity Course on ML&lt;/a&gt; by Perer Norvig&lt;/li&gt;
&lt;li&gt;Book "&lt;a href="http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325"&gt;Programming Collective Intelligence&lt;/a&gt;" &lt;/li&gt;
&lt;li&gt;TutsPlus course "&lt;a href="http://code.tutsplus.com/courses/machine-learning-distilled"&gt;Machine Learning Distilled&lt;/a&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deep Learning Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Geoffrey Hinton's coursera course "&lt;a href="https://class.coursera.org/neuralnets-2012-001/lecture"&gt;Neural Networks for Machine Learning&lt;/a&gt;"&lt;/li&gt;
&lt;li&gt;MIT Book on &lt;a href="http://www.iro.umontreal.ca/~bengioy/dlbook/"&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeplearning.stanford.edu/wiki/index.php/UFLDL_Tutorial"&gt;UFLDL tutorial by Stanford&lt;/a&gt; (alternative &lt;a href="http://deeplearning.stanford.edu/tutorial/"&gt;link&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeplearning.net/tutorial/"&gt;deeplearning.net tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.metacademy.org"&gt;Metacademy&lt;/a&gt; - "package manager" for Machine Learning knowledge&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kaggle.com/"&gt;kaggle&lt;/a&gt; - Machine Learning competitions&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLD0F06AA0D2E8FFBA"&gt;mathematicalmonk&lt;/a&gt; - Machine Learning youtube tutorials&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More DL and ML courses&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;NYU Course on &lt;a href="http://techtalks.tv/deep_learning_nyu_spring_2014/"&gt;Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.cmu.edu/~tom/10701_sp11/lectures.shtml"&gt;Anothre course on ML&lt;/a&gt; taught at Carnegie Mellon University by Tom Mitchell.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Books about Deep Learning&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Book "&lt;a href="http://neuralnetworksanddeeplearning.com"&gt;Neural Networks and Deep Learning&lt;/a&gt;" by Michael Nielsen&lt;/li&gt;
&lt;li&gt;Book Neural "&lt;a href="http://www.amazon.com/Neural-Networks-Learning-Machines-Edition/dp/0131471392"&gt;Networks and Learning Machines&lt;/a&gt;" by Simon O. Haykin&lt;/li&gt;
&lt;li&gt;&lt;a href="http://deeplearning.net/reading-list/"&gt;deeplearning.net reading list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Books on "how mind works"&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Jeff Hawkins - &lt;a href="http://www.amazon.com/On-Intelligence-Jeff-Hawkins/dp/0805078533&amp;gt;"&gt;On Intelligence&lt;/a&gt; (&lt;a href="http://www.audible.com/pd/Science-Technology/On-Intelligence-Audiobook/B002V8LK"&gt;Audiobook&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ray Kurzweil - &lt;a href="http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/"&gt;How to Create a Mind&lt;/a&gt; (&lt;a href="http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJ"&gt;Audiobook&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;First of all - the general overview of all the major topics, and the order in which to study them
&lt;!-- (made based on the overview of the Deep Learning from &lt;a href="http://metacademy.org/roadmaps/rgrosse/deep_learning"&gt;metacademy&lt;/a&gt;) --&gt;&lt;/p&gt;
&lt;!-- [![deep learning roadmap](/images/deep-learning/deep-learning-roadmap.png)](/images/deep-learning/deep-learning-roadmap.png) --&gt;

&lt;p&gt;&lt;a href="/images/deep-learning/deep-learning-roadmap-04.svg"&gt;&lt;img alt="deep learning roadmap" src="/images/deep-learning/deep-learning-roadmap-04.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now - the list of resources and projects, in order of learning:&lt;/p&gt;
&lt;h2&gt;1. Andrew Ng course&lt;/h2&gt;
&lt;p&gt;Andrew Ng &lt;a href="https://www.coursera.org/course/ml"&gt;Machine Learning course&lt;/a&gt;,&lt;br /&gt;
supplemented with his &lt;a href="http://openclassroom.stanford.edu/MainFolder/CoursePage.php?course=ufldl"&gt;course on Deep learning &lt;/a&gt;, and Neural Networks explanation from &lt;a href="https://class.coursera.org/machlearning-001/lecture/preview"&gt;Pedro Domingos ML course&lt;/a&gt;(for things that are unclear).&lt;/p&gt;
&lt;p&gt;Learn the basics of math in the process, as needed from Khan Academy(&lt;a href="http://www.youtube.com/playlist?list=PL19E79A0638C8D449"&gt;Calculus&lt;/a&gt;, &lt;a href="http://www.youtube.com/playlist?list=PLFD0EB975BA0CC1E0"&gt;Linear Algebra&lt;/a&gt;, &lt;a href="http://www.youtube.com/playlist?list=PLC58778F28211FA19"&gt;Probability&lt;/a&gt; &amp;amp; &lt;a href="http://www.youtube.com/playlist?list=PL1328115D3D8A2566"&gt;Statistics&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linear Regression&lt;/li&gt;
&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Feed Forward Neural Network&lt;/li&gt;
&lt;li&gt;Backpropagation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Neural Networks for Machine Learning&lt;/h2&gt;
&lt;p&gt;Geoffrey Hinton's coursera course "&lt;a href="https://class.coursera.org/neuralnets-2012-001/lecture"&gt;Neural Networks for Machine Learning&lt;/a&gt;", supplemented with  MIT Book on &lt;a href="http://www.iro.umontreal.ca/~bengioy/dlbook/"&gt;Deep Learning&lt;/a&gt; and &lt;a href="http://deeplearning.stanford.edu/wiki/index.php/UFLDL_Tutorial"&gt;UFLDL tutorial by Stanford&lt;/a&gt; (alternative &lt;a href="http://deeplearning.stanford.edu/tutorial/"&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement neural network with back-propagation to recognize hand-written digits from MNIST database:&lt;br /&gt;
&lt;a href="http://www.kaggle.com/c/digit-recognizer"&gt;Digit Recognizer Kaggle contest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. UFLD Tutorial&lt;/h2&gt;
&lt;p&gt;After understaning gradient descent and neural networks with back-propagation go through the &lt;a href="http://deeplearning.stanford.edu/wiki/index.php/UFLDL_Tutorial"&gt;UFLDL tutorial by Stanford&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And read MIT Book on &lt;a href="http://www.iro.umontreal.ca/~bengioy/dlbook/"&gt;Deep Learning&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand autoencoders, Restricted Boltzmann machines, create Deep Belief nets.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- *[You can help to improve this article by [editing](https://github.com/raymestalez/dm/blob/master/content/machine-learning/0005-deep-learning-resources.md) it on github]* --&gt;

&lt;!-- *[to be continued ....]* --&gt;

&lt;div style="clear: both;"&gt;&lt;/div&gt;

&lt;script&gt;
function prepareList() {
  $('body').find('li:has(ul)')
    .click( function(event) {
        if (this == event.target) {
            $(this).toggleClass('expanded');
            $(this).children('ul').toggle('medium');
        }
        return false;
    })
    .addClass('collapsed');
    //.children('ul').hide();
  };

  $(document).ready( function() {
      prepareList();
  });
&lt;/script&gt;

&lt;style&gt;
.collapsed {
    cursor: pointer;
    &lt;!-- content:' ►';  --&gt;

    &lt;!-- background: url({{ site.baseurl }}/images/small_right_arrow.gif) no-repeat left top; --&gt;
    &lt;!-- padding: 3px 0px 3px 20px; --&gt;
    &lt;!-- list-style: none; --&gt;
    }

.collapsed {
cursor: pointer;
    &lt;!-- content:' ►';  --&gt;
    &lt;!-- background: url({{ site.baseurl }}/images/small_right_arrow.gif) no-repeat left top;p --&gt;
    &lt;!-- padding: 3px 0px 3px 20px; --&gt;
    &lt;!-- list-style: none; --&gt;
    }

.entry img {
float:left;
}
&lt;!-- max-width: 400px;
max-height: 400px; --&gt;


&lt;/style&gt;

&lt;!--
list-style-image: url({{ site.baseurl }}/images/small_right_arrow.gif);
 --&gt;

&lt;div id="article-info"&gt;
&lt;hr/&gt;
&lt;!-- Author: &lt;a href="http://rationalfiction.io/users/rayalez"&gt;Ray Alez&lt;/a&gt; --&gt;

&lt;a style="float:right;"
href="https://github.com/raymestalez/dm/blob/master/content/machine-learning/0005-deep-learning-resources.md"&gt;Edit on GitHub&lt;/a&gt;
&lt;/div&gt;</summary></entry><entry><title>List of the key terms and concepts of ML</title><link href="/post/machine-learning-key-concepts" rel="alternate"></link><updated>2014-12-22T04:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-22:post/machine-learning-key-concepts</id><summary type="html">&lt;p&gt;This is a list of the key terms and concepts in Machine Learning.&lt;/p&gt;
&lt;h3&gt;Model&lt;/h3&gt;
&lt;p&gt;Our goal in ML is to create a good model. You take the input data and try to find underlying patterns in it, and the model is the output of your learning algorithms, it represents the patterns in data that you could find.&lt;/p&gt;
&lt;!-- TODO what is the difference between the model and a Target Variable/Function? --&gt;

&lt;h3&gt;Dataset&lt;/h3&gt;
&lt;p&gt;When you start with a machine learning problem the first thing you need is data.
All the data you have is your dataset.&lt;/p&gt;
&lt;p&gt;Imagine it like a table with rows and columns.&lt;/p&gt;
&lt;p&gt;Dataset contains &lt;strong&gt;instances&lt;/strong&gt;, also called &lt;strong&gt;vectors&lt;/strong&gt;, or &lt;strong&gt;training examples&lt;/strong&gt;.
These are the specific entries in your data, &lt;em&gt;rows&lt;/em&gt; of your table.&lt;/p&gt;
&lt;p&gt;And &lt;strong&gt;features&lt;/strong&gt; (also called &lt;strong&gt;attributes&lt;/strong&gt; of the instances) are the &lt;em&gt;columns&lt;/em&gt; of your table.&lt;/p&gt;
&lt;p&gt;What you do is you split your data into 2 parts: a training set and a test set.&lt;br /&gt;
&lt;strong&gt;Training set&lt;/strong&gt; you will use as an input, you will run learning algorithms on it to train your model.&lt;br /&gt;
&lt;strong&gt;Test set&lt;/strong&gt; is the part of your dataset that you put aside, so that when your model is created you can test it and make sure that it predicts things correctly.&lt;/p&gt;
&lt;h2&gt;Types of machine learning&lt;/h2&gt;
&lt;h3&gt;Supervised Learning&lt;/h3&gt;
&lt;p&gt;The goal of supervised learning is prediction.&lt;br /&gt;
You are given a set of labeled data, that contains inputs and outputs, so you know what you are looking for, what the right answers are, and you are trying to understand the mapping between inputs and outputs.&lt;/p&gt;
&lt;p&gt;Process:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="supervised learning" src="/images/machine-learning-intro/supervised-learning.png" /&gt;&lt;/p&gt;
&lt;p&gt;Model here is a mapping between inputs and outputs.&lt;br /&gt;
You run learning algorithms on the data to find a model, and once we have that model, we can feed it new inputs, and it will correctly predict new outputs. So now we can make new predictions on data that wasn't in the dataset.&lt;/p&gt;
&lt;p&gt;Types:&lt;/p&gt;
&lt;h3&gt;Regression&lt;/h3&gt;
&lt;p&gt;The output is continuous, it can be any real number.  &lt;/p&gt;
&lt;p&gt;Example: predicting house prices based on house size.&lt;/p&gt;
&lt;h3&gt;Classification&lt;/h3&gt;
&lt;p&gt;The output is discrete. Yes/no,  or red/blue/green. You are taking the input and trying to classify it into groups.&lt;/p&gt;
&lt;p&gt;Example: Classify emails as spam or not spam.&lt;/p&gt;
&lt;!-- Example:  
Housing prices.
price/size in feet.
fit a straight line through the data. or a quadratic/polynomial functio
prive/size in feet - graph in matplotlib!!
(regression - fitting a line) --&gt;

&lt;h2&gt;Unsupervised Learning&lt;/h2&gt;
&lt;p&gt;In unsupervised learning you don't know what you're looking for, you're just trying to find patterns in the unlabeled data, and group this data according to it.&lt;/p&gt;
&lt;p&gt;Process:&lt;br /&gt;
&lt;img alt="unsupervised learning clustering" src="/images/machine-learning-intro/unsupervised-learning-clustering.png" /&gt;&lt;/p&gt;
&lt;p&gt;Types: Clustering and Association.&lt;/p&gt;
&lt;p&gt;Example: Figure out types of items that are frequently bought together.&lt;/p&gt;
&lt;h2&gt;Overfitting. Approximation vs Generalization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Approximation&lt;/strong&gt; is how well your model fits into the training data, &lt;strong&gt;generalization&lt;/strong&gt; is how well your model can make predictions about new data that isn't in the training set.&lt;/p&gt;
&lt;p&gt;There is a fundamental tradeoff in machine learning, between how well the training data can be approximated, and how well model generalizes to new data.&lt;/p&gt;
&lt;!-- Example: [Graph. Linear function vs parabola] --&gt;

&lt;p&gt;&lt;strong&gt;Overfitting&lt;/strong&gt; is too much approximation with bad generalization.
It happens  when the function we've predicted fits great with a training set, but can't generalize and predict the actual new inpits.&lt;/p&gt;
&lt;p&gt;&lt;img style="width:320px; float:right;" src="/images/machine-learning-intro/overfitting.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;For example in the graph to the right the green line represents the actual underlying function that created the data, and blue line represents the model made by a machine learning algorithm that suffers from overfitting. &lt;/p&gt;
&lt;p&gt;So it is always important to remember that the goal is not to fit the training data, but to fit the underlying model that created the data, and make the best predictions on new examples.&lt;/p&gt;
&lt;!--
### Classification
//clustering
Breast cancer malignant/benign.
Estimate probability of that.

Features/attributes.

Examples

## Unsupervised learning
Unlabeled data, without knowing what data means, find the patterns.
Find some structure in data.
CLustering.
Example - google news.

Group peoply by genes. find structure in genes.
social vetwork analysis
market segmentation
astronomical data analysis

coctail party problem.

- definition
- examples

## Other
Reinforcement learning, recommender systems

## Cross-validation
## Generalization
## Dimensionality
the curse of dimensionality

--&gt;</summary></entry><entry><title>Introduction to Machine Learning</title><link href="/post/introduction-to-machine-learning" rel="alternate"></link><updated>2014-12-22T01:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-22:post/introduction-to-machine-learning</id><summary type="html">&lt;p&gt;This article is a general overview of Machine Learning and the surrounding fields.&lt;/p&gt;
&lt;h2&gt;What is Machine Learning?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The field of study that gives computers the ability to &lt;strong&gt;learn&lt;/strong&gt; without being explicitly programmed.&lt;br /&gt;
- Arthur Samuel.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Machine Learbing is a field that studies algorithms that can learn from data. These algorithms take a dataset as an input, and build a &lt;strong&gt;model&lt;/strong&gt; based on it. And then they make predictions or decisions based on that model, as opposed to following explicit instructions, like the usual programs do.&lt;/p&gt;
&lt;p&gt;Often it is impossible to create programms just by writing the code, becaue that would take too long, or you just don't know how to do that.
For example you can not write millions of programs for every one of amazon users that would suggest books this particular person would like, because it would just take too much effort, and you couldn't program a quadcopter to do some complex trick while it's flying, because you don't know how to express the commands it would need as a series of if-else statements.&lt;/p&gt;
&lt;p&gt;That is where ML comes in. With ML you can analyze a lot of data, find patterns in it, and use these patterns to allow computer to "learn" to perform certain tasks.&lt;/p&gt;
&lt;p&gt;Especially now, as more data becomes available, you can solve more and more complex problems by using ML, and now ML is used in &lt;a href="/post/practical-applications-of-machine-learning"&gt;a lot of fields&lt;/a&gt;. Availability of Big Data made machine learning much more valuavle.&lt;/p&gt;
&lt;p&gt;So Machine Learning analyzes the data, finds patterns in it, extracts knowledge from it, and uses it to predicts the output.&lt;/p&gt;
&lt;p&gt;It also allows us to discover new relationships and connections in the large sets of data, it allows us to "predict the future", and it allows computers to program themselves.&lt;/p&gt;
&lt;h2&gt;Machine Learning process&lt;/h2&gt;
&lt;div class="mermaid"&gt;
graph LR;
    UR(Unknown Relatioinship &lt;br/&gt;Target Function)--&gt;D(Data);
    D --&gt; LA(Learning Algorithm &lt;br/&gt;&lt;br/&gt; Model &gt; Evaluate &gt; Results &gt; &lt;br/&gt; &gt; Optimize &gt; New Model &gt; Repeat);
    M(Models) --&gt; LA;
    LA --&gt; FM(Final Model);
&lt;/div&gt;

&lt;p&gt;ML process begins with data(also called "training examples"), data contains examples of how some system operates, inputs and outputs. This data was produced by some process(also called "target function"), unknown to us, some pattern which we are trying to find out.&lt;/p&gt;
&lt;p&gt;We create models(representations) that present mappings from inputs to outputs, possible functions that produce this model. And then we will use our learning algorithm to find the final model(hypothesis) that represents the target function as close as possible. The best model will be the one that best explains the underlying pattern of data, that is most accurate at mapping inputs to the outputs.&lt;/p&gt;
&lt;p&gt;Learning algorithm is usuall y an iterative process, that takes a model evaluates it to find out how good the model is(how much errors doe it have), uses these results to  optimize the model to get a new one, that produces better results. It repeats until we get a final model that is good enough for our purposes.&lt;/p&gt;
&lt;p&gt;This means that for Machine Learning it requires data with a predictable underlying pattern, usually it works best when this pattern is complex, otherwise we could use simpler algorithms.&lt;/p&gt;
&lt;h2&gt;Components of machine learning&lt;/h2&gt;
&lt;p&gt;These are the 3 main components of machine learning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Representation&lt;br /&gt;
  This is how we mathimatically/algorithmically represent our model.&lt;br /&gt;
  Examples:  &lt;ul&gt;
&lt;li&gt;K-Nearest Neighbor&lt;/li&gt;
&lt;li&gt;Decision Trees&lt;/li&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;Linear Regression&lt;/li&gt;
&lt;li&gt;Neural Networks&lt;/li&gt;
&lt;li&gt;Support Vector Machines &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evaluation  n
    This is how we find the errors in our model and decide how good it is.&lt;br /&gt;
    Examples:  &lt;ul&gt;
&lt;li&gt;Accuracy&lt;/li&gt;
&lt;li&gt;Error Rate&lt;/li&gt;
&lt;li&gt;Squared Error&lt;/li&gt;
&lt;li&gt;Info Gain&lt;/li&gt;
&lt;li&gt;Cost&lt;/li&gt;
&lt;li&gt;Margin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization
  It is a way to search among many models and choose the one that's best.&lt;br /&gt;
  Examples:  &lt;ul&gt;
&lt;li&gt;Greedy Search&lt;/li&gt;
&lt;li&gt;Gradient Descent&lt;/li&gt;
&lt;li&gt;Newton's Method&lt;/li&gt;
&lt;li&gt;Linear Programming&lt;/li&gt;
&lt;li&gt;Quadratic Programming&lt;/li&gt;
&lt;li&gt;Evolutionary Computation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
### Relationship between deep learning and other fields
[![ai-ml-dl](/images/deep-learning/ai-ml-dl.png)](/images/deep-learning/ai-ml-dl.png)

So Deep Learning(DL) is a subfield of Machine Learning(ML) which is a subfield Artificial Intelligence which is a subfield Computer Science.

## Deep Learning
&lt;img src="/images/deep-learning/artificial_neural_network.png"
style="width: 300px; float: right;"/&gt;

&gt; "Deep learning" is the new big trend in Machine Learning. It promises general, powerful, and fast machine learning, moving us one step closer to AI.

Deep Learning is a part of Machine Learning that focuses on creating multilayer Artificial Neural Networks(ANN). "Deep" means that the algorithm has several hidden layers of "neurons".

ANNs are inspired by the theories of how biologial brain works, which in itself is awesome, and turns out that DL algorithms are extremely good at performing a lot of tasks, and in the past years they are making huge improvements upon other ML algorithms.

DL allows to find patterns in unlabeled data, for example it can look at a lot of youtube videos, extract concepts from them, and to learn to recognize a cat, without initially knowing what it is.

In the following years DL will be a huge driver of innovation, because it can be applied almost everywhere, and it can change the way we do things dramatically.

At this point a lot of [resources](/post/deep-learning-resources/) are available on the subject, so it's a grat time to get into this awesome field.
--&gt;

&lt;h3&gt;Related Posts:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/post/machine-learning-key-concepts"&gt;Key Concepts in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>List of the best resources to learn the foundations of Artificial Intelligence</title><link href="/post/artificial-intelligence-resources" rel="alternate"></link><updated>2014-12-01T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-01:post/artificial-intelligence-resources</id><summary type="html">&lt;p&gt;This is a list of the best resources about AI that I could find on the web.
It will be the most useful for beginners, people who want to learn this field, but don't
know where to start.&lt;/p&gt;
&lt;p&gt;I have developed a strategy for myself, for learning the basics of AI in the
fastest and most practical way, and I'm sure it will be useful to you as well.&lt;/p&gt;
&lt;p&gt;Here's the list of the best resources to begin learning AI with:&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;h3&gt;Lisp and Python - best programming languages for AI:&lt;/h3&gt;
&lt;p&gt;Of all the programming languages you can choose to practice AI there are 2 best
options: Lisp and Python. Lisp was created specifically for creating AI, and it
is widely considered to be the most elegant and brilliant programming language
ever.  &lt;/p&gt;
&lt;p&gt;Here's the best way to learn it:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Book "&lt;a href="http://www.amazon.com/Land-Lisp-Learn-Program-Game/dp/1593272812/"&gt;Land of Lisp&lt;/a&gt;"
  (Book about lisp with some AI algorithms)&lt;br /&gt;
  This is an excellent and very fun introduction to lisp, makes learning very
  enjoyable, understandable, and includes a lot of algorithms and basic principles
  that will be very useful when you will be going throuhg AIMA.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paul Graham &lt;a href="http://www.amazon.com/ANSI-Common-LISP-Paul-Graham/dp/0133708756"&gt;ANSI Common Lisp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's my favorite book on python:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.diveintopython3.net/"&gt;Dive Into Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General Coputer Science&lt;/h3&gt;
&lt;p&gt;(algorithms, data structures, complexity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2Op3QLzMgSY&amp;amp;list=PLE18841CABEA24090#t=253"&gt;MIT course&lt;/a&gt;
(based on &lt;a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871"&gt;SICP book&lt;/a&gt;)&lt;br /&gt;
  This is a course on lisp and basics of computer science, based on one of the most influential and seminal books in CS - "Structure and Interpretation of Computer Programs".&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Math&lt;/h3&gt;
&lt;p&gt;My favorite resource for learning the basics of math is Khan Academy.
Here's the very basics of math that you need to begin learning AI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.khanacademy.org/math/algebra2"&gt;Algebra 2&lt;/a&gt;(logarithms, complex numbers)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLD6DA74C1DBF770E7"&gt;Trigonometry&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PL19E79A0638C8D449"&gt;Calculus&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLFD0EB975BA0CC1E0"&gt;Linear Algebra&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/playlist?list=PLC58778F28211FA19"&gt;Probability&lt;/a&gt;
&amp;amp; &lt;a href="http://www.youtube.com/playlist?list=PL1328115D3D8A2566"&gt;Statistics&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Introductory logic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;General overview of the field, most important topics:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Book "&lt;a href="http://www.amazon.com/Artificial-Intelligence-Modern-Approach-Edition/dp/0136042597"&gt;Artificial Intelligence: A Modern Approach (AIMA)&lt;/a&gt;"&lt;br /&gt;
  This is the best book about AI, and one of the best books written on any topic. Ever. It may be challenging for a complete beginner, but it covers most of the topics and fields of AI, and if you will read it - you will have a very solid foundations of the field. This is definitely a best place to start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCshmLD2MsyqAKBx8ctivb5Q/videos"&gt;Artificial Intelligence course&lt;/a&gt; from UC Berkeley(CS 188)&lt;br /&gt;
  (link above leads to the youtube channel with my favorite version of the course, here's the &lt;a href="http://www.cs.berkeley.edu/~russell/classes/cs188/f14/lecture_videos.html"&gt;alternative list of lectures&lt;/a&gt;, which is the official course page that lists all the recordings of this course)&lt;br /&gt;
  This is an excellent course from Berkeley, series of video lectures, a lot of them are based on AIMA, it is a perfect complement to the book, it will make it much more understandable and enjoyable to read. Plus there's great practical projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Machine Learning.:&lt;/h3&gt;
&lt;p&gt;Machine learning is the most "practical" and immediately useful subfield of AI,
which is great because focusing on learning it will allow you immediately
benefit from, and apply your knowledge on practical projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Andrew Ng:&lt;/strong&gt;&lt;br /&gt;
&lt;a href="https://www.coursera.org/course/"&gt;https://www.coursera.org/course/&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pedro Domingos:&lt;/strong&gt;&lt;br /&gt;
&lt;a href="https://www.coursera.org/course/machlearning"&gt;https://www.coursera.org/course/machlearning&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Programming Collective Intelligence&lt;/strong&gt;&lt;br /&gt;
&lt;a href="http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/05965293"&gt;http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/05965293&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How mind works:&lt;/h3&gt;
&lt;p&gt;On the opposite end of a spectrum - here's some fantastic(and very entertaining)
books about how human mind works. It is not necessary very practical, but they
are very exciting and fun to read, and obviously understanding of human brain
can be very useful. At the very least - you will be inspired and enjoy reading
them a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jeff Hawkins - On Intelligence&lt;br /&gt;
&lt;a href="http://www.amazon.com/On-Intelligence-Jeff-Hawkins/dp/0805078533"&gt;http://www.amazon.com/On-Intelligence-Jeff-Hawkins/dp/0805078533&lt;/a&gt;&lt;br /&gt;
  Audiobook: &lt;a href="http://www.audible.com/pd/Science-Technology/On-Intelligence-Audiobook/B002V8LK"&gt;http://www.audible.com/pd/Science-Technology/On-Intelligence-Audiobook/B002V8LK&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ray Kurzweil - How to Create a Mind:&lt;br /&gt;
&lt;a href="http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/"&gt;http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/&lt;/a&gt;&lt;br /&gt;
  Audiobook: &lt;a href="http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJ"&gt;http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJ&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principles of Neural Science&lt;br /&gt;
&lt;a href="http://www.amazon.com/Principles-Neural-Science-Edition-Kandel/dp/00713901"&gt;http://www.amazon.com/Principles-Neural-Science-Edition-Kandel/dp/00713901&lt;/a&gt;&lt;br /&gt;
    This is the best book I could find that goes in depth into NS. 2 books above presented the general theories how mind works, this one talks about hardcore science, neuro-anatomy and such. Very interesting, but also very long - I'm still reading it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Getting started with Web Development</title><link href="/post/getting-started-with-web-development" rel="alternate"></link><updated>2014-11-01T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-11-01:post/getting-started-with-web-development</id><summary type="html">&lt;p&gt;Recently I've got a question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Where did you learn web development? What is the best way to get started in web development?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's my response:&lt;/p&gt;
&lt;p&gt;I've learned everything from books, video courses and by creating my own projects.
And I think that it is the absolutely best way to go about it.
All the information that you need is available for free on the internet, so you can learn everything just by using free(or very cheap) resources and practicing.&lt;/p&gt;
&lt;p&gt;If you are starting from the absolute zero - I would suggest to just create a wordpress website and mess around with it, make and customize a blog for yourself or whatever you like, go from there. It is extremely easy to do, you will get your first experiences, and learn the basics of web development by osmosis.&lt;/p&gt;
&lt;p&gt;Once you have done that - set out to learn and understand some basic skills.
Here's the skills that you will need:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn html and css&lt;/strong&gt;
It is the easiest thing to understand, you will learn it quickly, and enjoy the instant satisfaction of being able to create some pretty web pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn the basics of javascript&lt;/strong&gt;
Simply put, javascript is what lets you to create all the animations and moving objects on the web pages(and much, much more). Learn and understand the basics first, to be able to manipulate simple elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn some backend programming language, and a framework.&lt;/strong&gt;
Backend programming language is what lets you to create things like blogs and forums, this is what automatically generates pages on the "server side"(as opposed to the "client side" - in your browser).&lt;/p&gt;
&lt;p&gt;I suggest to learn &lt;strong&gt;Python and Django&lt;/strong&gt;.
There are alternatives to that - like Ruby and Ruby on Rails, or a sad old php.
But python is considered to be the best programming language for beginners, and it is used everywhere(even bitvid is created with it), it has a huge amount of tutorials and information, and you can apply it in any field.
It is easy to learn and understand, it is elegant, beautiful, and it is awesome. So you can't go wrong with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn the basics of database administration and sql.&lt;/strong&gt;
Just to understand what that is and what you can use it for.&lt;/p&gt;
&lt;p&gt;Once you've done that - you will have a very solid foundation, and the kind of things that you are capable of creating will depend only on your experience. You will be able to start freelancing or making some projects for yourself and your friends, building portfolio, gaining some experience, and becoming more advanced.&lt;/p&gt;
&lt;p&gt;It may seem like a lot - but don't worry about it, it will be much easier than it seems, and it is &lt;strong&gt;extremely&lt;/strong&gt; fun.&lt;/p&gt;
&lt;p&gt;You will also need to learn to use a bunch of tools, like a good text editor(start with sublime, move on to emacs or vim), git, vagrant, apache, etc - but don't worry about these things for now, you will naturally learn them when you will need to.&lt;/p&gt;
&lt;p&gt;Here's some great resources for you to get started:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code School&lt;/strong&gt; (codeschool.com)&lt;/p&gt;
&lt;p&gt;It is not free, but it is relatively cheap, and it is the fastest and easiest way to learn the basics of HTML, CSS, and Javascript that I know. Of course you can find plenty of free courses on the youtube and on torrents.
&lt;strong&gt;Bucky Roberts&lt;/strong&gt; - Here's a fantastic youtube channel created by a great guy, who will teach you most of it for free:
https://www.youtube.com/user/thenewboston/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can learn the basics of python from Bucky Roberts as well, or - you can go through the course "Learn Python the Hard Way" - despite it's name it is the easiest way to learn python that I'm aware of.
Or you could just google and find enormous amount of information and free courses, and pick whichever one you like the most.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tuts+ and Django Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(go into this only after learning html/css/js)
http://courses.tutsplus.com/courses/django-unchained
Again, not free, but they have my favorite introductory course to django. You will learn it from the basics by creating your own hackernews clone - it is awesome and easy to follow.
Or you can star with the official documentation - it is written extremely well, and contains a great tutorial for beginners (docs.djangoproject.com)
After that you can read a great book "2 Scoops of Django".&lt;/p&gt;
&lt;p&gt;That's pretty much it) This is the best way(that I'm aware of) for going from absolute zero to a solid intermediate(of course if you will practice and gain experience by making your own projects in the process).&lt;/p&gt;
&lt;p&gt;I hope that gives you the general idea. At least this is the kind of post I would like to read 2-3 years ago. If anything is confusing or you have more questions - please ask, I will be happy to answer =)&lt;/p&gt;</summary></entry><entry><title>Great books</title><link href="/post/great-books" rel="alternate"></link><updated>2014-11-01T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-11-01:post/great-books</id><summary type="html">&lt;h3&gt;Catch Me If You Can by Frank Abagnale&lt;/h3&gt;
&lt;p&gt;I remember disliking the movie, but the book is brilliant and hilarious. Autobiography of one of the boldest, horniest, and most brilliant con artists.&lt;/p&gt;
&lt;h3&gt;Ghost In The Wires by Kevin Mitnick&lt;/h3&gt;
&lt;p&gt;On the same topic, autobiography of a great hacker. Extremely clever and awesome. I bet people here will love it.&lt;/p&gt;
&lt;h3&gt;Zero to One by Peter Thiel&lt;/h3&gt;
&lt;p&gt;Very intelligent and inspiring book about startups and new technologies. A lot of new and great ideas, I've enjoyed it a lot.&lt;/p&gt;
&lt;h3&gt;iWoz&lt;/h3&gt;
&lt;p&gt;Autobiography of Steve Wozniak. Also wonderful and super positive and inspiring story.&lt;/p&gt;
&lt;h3&gt;Trust me, I'm lying.&lt;/h3&gt;
&lt;p&gt;Book about how modern social media is being manipulated. Short and interesting. Makes you think differently about what you read on the internet.&lt;/p&gt;
&lt;h3&gt;On Intelligence by Jeff Hawkins&lt;/h3&gt;
&lt;p&gt;Theory of how human mind works. Must read for everyone who is into AI, but also a great book for everyone else.&lt;/p&gt;</summary></entry></feed>