<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>digitalmind</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-07-23T00:00:00+02:00</updated><entry><title>Multiclass Classification of Flower Species</title><link href="/post/iris" rel="alternate"></link><updated>2016-07-23T00:00:00+02:00</updated><author><name>Ray Alez</name></author><id>tag:,2016-07-23:post/iris</id><summary type="html">&lt;p&gt;The purpose of this project is to learn the basics of training an ANN on a simple example. I will use Keras, TensorFlow, and scikit-learn to train ANN that will classify flower species based on a few basic parameters.&lt;/p&gt;
&lt;h2&gt;Iris Dataset&lt;/h2&gt;
&lt;p&gt;I will use a simple dataset that describes different species of flowers and their properties. There are 3 species of iris flowers(Iris setosa, Iris virginica and Iris versicolor), and the dataset contains examples describing 4 properties of each flower (the length and the width of it's sepals and petals), and the species it belongs to. The goal is to predict the species of a flower based on these parameters.&lt;/p&gt;
&lt;p&gt;The data looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;5.1,3.5,1.4,0.2,Iris-setosa
5.0,3.3,1.4,0.2,Iris-setosa
....
7.0,3.2,4.7,1.4,Iris-versicolor
6.4,3.2,4.5,1.5,Iris-versicolor
....
6.3,3.3,6.0,2.5,Iris-virginica
5.8,2.7,5.1,1.9,Iris-virginica
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Iris Scatterplot" src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Iris_dataset_scatterplot.svg/749px-Iris_dataset_scatterplot.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;To load the dataset download the csv file &lt;a href="https://github.com/raymestalez/dm/blob/master/flowers/iris.csv"&gt;here&lt;/a&gt;, and then load it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;np_utils&lt;/span&gt;

&lt;span class="c"&gt;# load dataset&lt;/span&gt;
&lt;span class="n"&gt;dataframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iris.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;'X' is a variable that contains the feautres that describe the lenghts of each of the flower parts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mf"&gt;5.1&lt;/span&gt;  &lt;span class="mf"&gt;3.5&lt;/span&gt;  &lt;span class="mf"&gt;1.4&lt;/span&gt;  &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;4.9&lt;/span&gt;  &lt;span class="mf"&gt;3.&lt;/span&gt;   &lt;span class="mf"&gt;1.4&lt;/span&gt;  &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;4.7&lt;/span&gt;  &lt;span class="mf"&gt;3.2&lt;/span&gt;  &lt;span class="mf"&gt;1.3&lt;/span&gt;  &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;....&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;5.9&lt;/span&gt;  &lt;span class="mf"&gt;3.&lt;/span&gt;   &lt;span class="mf"&gt;5.1&lt;/span&gt;  &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and 'Y' contains the corresponding labels that describe the species of the flower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[&amp;#39;Iris-setosa&amp;#39;     &amp;#39;Iris-setosa&amp;#39;     ... &amp;#39;Iris-setosa&amp;#39;
 ...
 &amp;#39;Iris-versicolor&amp;#39; &amp;#39;Iris-versicolor&amp;#39; ... &amp;#39;Iris-versicolor&amp;#39; 
 ...
 &amp;#39;Iris-virginica&amp;#39;  &amp;#39;Iris-virginica&amp;#39;  ... &amp;#39;Iris-virginica&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now to be able to use these labels in our network, we want to represent each of them as vector of 3 &lt;!-- boolean --&gt; values that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Iris-setosa Iris-versicolor Iris-virginica
     1              0             0
     0              1             0 
     0              0             1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To do that, we will first use LabelEncoder(), that will turn the strings describing names of the plants into numerical values("Iris-setosa" will be represented by 0, "Iris-versicolor" by 1, and "Iris-virginica" by 2):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#encode class values as integers&lt;/span&gt;
&lt;span class="n"&gt;encoder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;encoded_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;encoder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that our encoded list of labels (encoded_Y) now looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then we will use np_utils.to_categorical():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# convert integers to dummy variables (hot encoded)&lt;/span&gt;
&lt;span class="n"&gt;dummy_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np_utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_categorical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encoded_Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to convert it into a binary matrix that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;0.&lt;/span&gt;  &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This process is called "one-hot encoding".&lt;/p&gt;
&lt;p&gt;Now we have the data we can use to train our neural network.&lt;/p&gt;
&lt;h2&gt;Defining the model&lt;/h2&gt;
&lt;p&gt;The next step is to define our model(the shape of the neural network). &lt;/p&gt;
&lt;p&gt;Initialize random seed
We initialize the random number generator with a specific value, so that we could reproduce the same results in the future:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# fix random seed for reproducibility&lt;/span&gt;
&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to create a simple fully connected neural network. It will have 4 inputs(one for each feature describing the property of the flower), one hidden layer with 4 neurons, and an output layer with 3 values(one for each class of the flower).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sequential&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dense&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.wrappers.scikit_learn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KerasClassifier&lt;/span&gt;

&lt;span class="c"&gt;# define baseline model&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;baseline_model&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# create model&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_dim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;relu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sigmoid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c"&gt;# Compile model&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;categorical_crossentropy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;accuracy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We create a Seuential model, add two layers to it, and specify their paramteters.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dense class creates a fully connected layer&lt;/li&gt;
&lt;li&gt;The first parameter describes the number of neurons in the layer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input_dim&lt;/code&gt;(on the first layer) specifies the number of inputs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; specifies the way we set the initial weights. ("normal" means that we want to intialize them to small random numbers.) &lt;!-- from a Gaussian distribution. --&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activation&lt;/code&gt; determines the activation function for every neuron.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the model is defined, we can compile it.   &lt;!-- ? --&gt; To do that we need to set a few additional parameters required for training the network. Our goal is to find the best set of weights to make predictions for this problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Loss function is used to determine how inaccurate the current prediction is and evaluate the set of weights.&lt;/li&gt;
&lt;li&gt;Optimizer is used to search through different weights for the network and minimize the error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we pass our model to the KerasClassifier function, which allows us to wrap the model built with Keras to use in scikit learn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;estimator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KerasClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;build_fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;baseline_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nb_epoch&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We pass the model we have created to it's build_fn parameter, which specifies a name of a function used to create the model. We also specify the number of epochs and the batch size parameters, which will be automatically passed to the fit() function. &lt;/p&gt;
&lt;h2&gt;Evaluating the model using scikit&lt;/h2&gt;
&lt;p&gt;Now we want to train and evaluate our model on the training data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.cross_validation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KFold&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;

&lt;span class="n"&gt;kfold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n_folds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dummy_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;kfold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Accuracy: &lt;/span&gt;&lt;span class="si"&gt;%.2f%%&lt;/span&gt;&lt;span class="s"&gt; (&lt;/span&gt;&lt;span class="si"&gt;%.2f%%&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We use KFold to define the model evaluation procedure,  &lt;!-- ? --&gt; and then use the cross_val_score function that evaluates our model(estimator), on our dataset(X and dummy_y), using the 10-fold cross validation procedure(kfold).&lt;/p&gt;
&lt;p&gt;Finally, we have completed our training and can print the accuracy results.&lt;/p&gt;
&lt;p&gt;You can see the &lt;a href="https://github.com/raymestalez/dm/blob/master/flowers/iris.py"&gt;whole code on github&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Artificial Neural Network writes Harry Potter and the Methods of Rationality</title><link href="/post/ai-writes-hpmor" rel="alternate"></link><updated>2016-07-22T00:00:00+02:00</updated><author><name>Ray Alez</name></author><id>tag:,2016-07-22:post/ai-writes-hpmor</id><summary type="html">&lt;p&gt;I have trained an Artificial Neural Network on the full text of &lt;a href="http://hpmor.com/"&gt;HPMOR&lt;/a&gt;. This is the text it generated. (I have added formatting and removed the most incoherent sentences.)&lt;/p&gt;
&lt;p&gt;You can find the source code and an awesome, easy to follow tutorial &lt;a href="https://medium.com/deep-writing/how-to-write-with-artificial-intelligence-45747ed073c#.9farmj44y"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Somewhere inside him all further. “You have to do science with Professor McGonagall? Say with Fiendfyre?” “Ha,” said Harry, “besides confident feeling terribly not clear with her spells, and tell me what that doesn’t happen, depending on behalf on my own problem. “That sounds like a couple of their brain’s shock, she is going to tell them.”&lt;/p&gt;
&lt;p&gt;“Professor asked me in a plausible-sounding excuse to tell anyone that I’m doing,” Harry said incredulously. Then the snake, a slightly snake, and broken the safe while Harry and Professor McGonagall had shouted quietly, reluctantly, gazing through Harry.&lt;/p&gt;
&lt;p&gt;Harry swallowed hard, for a polite breath that she could probably see how, in a tiny crawling sensation or repair casting surprise off the Cloak. She turned his hand as his office left. He looked down from the stairs. His first hand stood up across the graveyard. So then it was his.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Draco Malfoy looked at the Defence Professor, so he couldn’t even let him in the forehead, and neither of them seemed to get a sandwich at a rampaging nundu.&lt;/p&gt;
&lt;p&gt;“Do not say you joining your enemies.” said the Defence Professor. “No,” said the boy feeling sick in the stomach.&lt;/p&gt;
&lt;p&gt;The awful war was almost unfrozen, there was terror from.&lt;/p&gt;
&lt;p&gt;“I do find when you do here, boy? I would try to adapt but a remnant of your forces. Just the true inconvenience of rethinking. Have only a thoughtful look in the list, boy?” said in a quietly.&lt;/p&gt;
&lt;p&gt;What’s a long in the midst of nothingness in the library, as when he understood how much darkness not to be feared. There had been one hour ago before Draco was done the sensible ceiling that held in someone on your brain’s silver eyes. The gold all lay from the wall once more. Fine.&lt;/p&gt;
&lt;p&gt;And that Professor Quirrell would be hard for anything like galaxies everything we’re easy and every sort. The glance would not be over. Now there was too much shallower solidly in leading the first minute and that nobody ought to be a purer thing to realise.&lt;/p&gt;
&lt;p&gt;“Could not rissk battle is an Unbreakable Vow to make angry? Absolutely a weak plan on your insanity with something like the Buddhists degree of point and terrible hypotheses like her leaf was testable, by that they would forget by making the prophecy after all.”&lt;/p&gt;
&lt;p&gt;“Will lose no other to finish my hands and you felt so cunning as blink to make sure what any of your forces move longer than me, so just in fact you truly destroying a lesson to live, but they might set from this country — you, it works so boy?”&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Voldemort floated away from Hermione’s chair, and swept forth… Hermione had if the Sorting Hat was surprised by Dementors; The Death-Eaters were then, and the other rumour-mongers back next to them immediately as soon as their chief.&lt;/p&gt;
&lt;p&gt;Hermione Granger didn’t take information up with the monocles of the night of a gold coins from that man’s Legion were only a story, which it was like an adequate rules of common healing.&lt;/p&gt;
&lt;p&gt;As a larger mental hospital felt old and that Hermione Granger would probably try to blush, if the true part. Voldemort didn’t work.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Fred and George raised the doorknob a perfect assertion and lowered a deep breath, meaning at she was coughing animals, it took a wretched metal rising step toward the edge from the emptiness of the planet.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;“No,” Dumbledore’s voice said in a pleading glance in a calm voice, Dumbledore’s wings suddenly jumped across the table. The conversation looked through. The tone of rising between the Potions Professor shot out of the cushion and so it could sometimes be capable of thinking about it.&lt;/p&gt;
&lt;p&gt;Dumbledore had to Apparate the path to some that he remembered things about how to choose wrongly, never say you would be made. Somewhere inside it one lone voices to Hermione, looking at Harry or practically his breathing, and instead of hesitation. “Sorry, Creative. Unpredictable. Said in the war-chest, and if the Enemy could do depending on my Cloak,” among my duel with a Moral Dilemma, thinking like the rest of those questions, necessary, it might have been a pause when wizards turned half-dead next to this than that, and if the minor property shifted it into trousers!&lt;/p&gt;</summary></entry><entry><title>Artificial Intelligence resources</title><link href="/post/artificial-intelligence-resources" rel="alternate"></link><updated>2014-12-01T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-12-01:post/artificial-intelligence-resources</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/images/digital-brain-header.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is a list of the best resources to learn the foundations of Artificial Intelligence and Deep Learning. It will be the most useful for beginners, people who want to get into this field, but don't know where to start.&lt;/p&gt;
&lt;h2&gt;Machine Learning&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For the best introduction into Machine Learning field, watch Andrew Ng &lt;a href="https://www.coursera.org/course/ml"&gt;Machine Learning course&lt;/a&gt; on Coursera. It explains the basic concepts and gives you a good understanding of most important algorithms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a short, high level overview of ML algorithms, check out a great TutsPlus course “&lt;a href="http://code.tutsplus.com/courses/machine-learning-distilled"&gt;Machine Learning Distilled&lt;/a&gt;”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A book “&lt;a href="http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325"&gt;Programming Collective Intelligence&lt;/a&gt;” is an excellent resource to learn the practical implementation of ML algorithms in python. It takes you through a lot of practical projects, covering all of the necessary fundamentals.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other great resources you might want to check out are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://class.coursera.org/machlearning-001/lecture/preview"&gt;Pedro Domingos ML course&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.udacity.com/course/cs271"&gt;Udacity Course on ML&lt;/a&gt; by Perer Norvig&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cs.cmu.edu/%7Etom/10701_sp11/lectures.shtml"&gt;Another course on ML&lt;/a&gt; taught at Carnegie Mellon University by Tom Mitchell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/playlist?list=PLD0F06AA0D2E8FFBA"&gt;mathematicalmonk&lt;/a&gt; — Machine Learning youtube tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Deep Learning&lt;/h2&gt;
&lt;p&gt;The best introduction to Deep Learning that I have encountered is &lt;a href="https://machinelearningmastery.com/deep-learning-with-python/"&gt;Deep Learning With Python&lt;/a&gt;. This book gives you a quick, practical introduction into the field. It does not have a long list of prerequisites, it introduces you to the most advanced tools(Keras, TensorFlow), and describes how to use them through anseries of practical projects. after that, [reddit post].&lt;/p&gt;
&lt;p&gt;Google DL course
https://www.youtube.com/playlist?list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal&lt;/p&gt;
&lt;p&gt;After that, to get more in depth, here are some interesting resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Geoffrey Hinton’s coursera course “&lt;a href="https://class.coursera.org/neuralnets-2012-001/lecture"&gt;Neural Networks for Machine Learning&lt;/a&gt;”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIT Book on &lt;a href="http://www.iro.umontreal.ca/%7Ebengioy/dlbook/"&gt;Deep Learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deeplearning.stanford.edu/wiki/index.php/UFLDL_Tutorial"&gt;UFLDL tutorial by Stanford&lt;/a&gt; (alternative &lt;a href="http://deeplearning.stanford.edu/tutorial/"&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deeplearning.net/tutorial/"&gt;deeplearning.net tutorials&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NYU Course on &lt;a href="http://techtalks.tv/deep_learning_nyu_spring_2014/"&gt;Deep Learning&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Book “&lt;a href="http://neuralnetworksanddeeplearning.com/"&gt;Neural Networks and Deep Learning&lt;/a&gt;” by Michael Nielsen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Book Neural “&lt;a href="http://www.amazon.com/Neural-Networks-Learning-Machines-Edition/dp/0131471392"&gt;Networks and Learning Machines&lt;/a&gt;” by Simon O. Haykin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://deeplearning.net/reading-list/"&gt;deeplearning.net reading list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Artificial Intelligence&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Book "&lt;a href="http://www.amazon.com/Artificial-Intelligence-Modern-Approach-Edition/dp/0136042597"&gt;Artificial Intelligence: A Modern Approach (AIMA)&lt;/a&gt;"&lt;br /&gt;
  This is the best book about the "old school" AI, it covers most of the topics and fields of AI, and if you will read it - you will have a very solid foundations of the field. This is definitely the best place to start.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCshmLD2MsyqAKBx8ctivb5Q/videos"&gt;Artificial Intelligence course&lt;/a&gt; from UC Berkeley(CS 188)&lt;br /&gt;
  This is an excellent course from Berkeley, series of video lectures, a lot of them are based on AIMA, it is a perfect complement to the book, it will make it much more understandable and enjoyable to read. Plus there's great practical projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How mind works:&lt;/h2&gt;
&lt;p&gt;On the opposite end of a spectrum - here's some fantastic(and very entertaining)
books about how human mind works. It is not necessary very practical, but they
are very exciting and fun to read, and obviously understanding of human brain
can be very useful. At the very least - you will be inspired and enjoy reading
them a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jeff Hawkins - On Intelligence&lt;br /&gt;
&lt;a href="http://www.amazon.com/On-Intelligence-Jeff-Hawkins/dp/0805078533"&gt;http://www.amazon.com/On-Intelligence-Jeff-Hawkins/dp/0805078533&lt;/a&gt;&lt;br /&gt;
  Audiobook: &lt;a href="http://www.audible.com/pd/Science-Technology/On-Intelligence-Audiobook/B002V8LK"&gt;http://www.audible.com/pd/Science-Technology/On-Intelligence-Audiobook/B002V8LK&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ray Kurzweil - How to Create a Mind:&lt;br /&gt;
&lt;a href="http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/"&gt;http://www.amazon.com/How-Create-Mind-Thought-Revealed/dp/0143124048/&lt;/a&gt;&lt;br /&gt;
  Audiobook: &lt;a href="http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJ"&gt;http://www.audible.com/pd/Science-Technology/How-to-Create-a-Mind-Audiobook/B009S7OKJ&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Principles of Neural Science&lt;br /&gt;
&lt;a href="http://www.amazon.com/Principles-Neural-Science-Edition-Kandel/dp/00713901"&gt;http://www.amazon.com/Principles-Neural-Science-Edition-Kandel/dp/00713901&lt;/a&gt;&lt;br /&gt;
    This is the best book I could find that goes in depth into NS. 2 books above presented the general theories how mind works, this one talks about hardcore science, neuro-anatomy and such. Very interesting, but also very long - I'm still reading it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GEB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Math&lt;/h2&gt;
&lt;p&gt;Here's the very basics of math that you need to begin learning AI:&lt;/p&gt;
&lt;h3&gt;Calculus&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/playlist?list=PL19E79A0638C8D449"&gt;Khan Academy Calculus videos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.coursera.org/course/m2o2c2"&gt;Coursera Calculus course&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIT lectures on &lt;a href="http://ocw.mit.edu/courses/mathematics/18-02sc-multivariable-calculus-fall-2010/index.htm"&gt;Multivariable Calculus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Linear Algebra&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/playlist?list=PLFD0EB975BA0CC1E0"&gt;Khan Academy Linear Algebra videos&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/video-lectures/"&gt;MIT linear algebra videos&lt;/a&gt; by Gilbert Strang&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cs.brown.edu/video/channels/coding-matrix-fall-2014/?page=2"&gt;Coding the Matrix&lt;/a&gt; — Brown University course on Linear Algebra for CS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Probability and statistics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Khan Academy &lt;a href="http://www.youtube.com/playlist?list=PLC58778F28211FA19"&gt;Probability&lt;/a&gt; &amp;amp; &lt;a href="http://www.youtube.com/playlist?list=PL1328115D3D8A2566"&gt;Statistics&lt;/a&gt; videos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.edx.org/course/introduction-probability-science-mitx-6-041x#.VJfS2LQAKc"&gt;edx probability course&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Khan Academy &lt;a href="http://www.youtube.com/playlist?list=PL1328115D3D8A2566"&gt;Statistics&lt;/a&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Coputer Science&lt;/h3&gt;
&lt;p&gt;To be good at AI it's best to be comfortable with the general concepts of computer science and programming. &lt;/p&gt;
&lt;p&gt;If you are just starting out, I recommend to read &lt;a href="http://www.diveintopython3.net/"&gt;Dive Into Python 3&lt;/a&gt; - an amazing book that will teach you most of the important things that you need to be able to use python.&lt;/p&gt;
&lt;p&gt;To understand the nature of computer programming more in depth - watch this classic &lt;a href="https://www.youtube.com/watch?v=2Op3QLzMgSY&amp;amp;list=PLE18841CABEA24090#t=253"&gt;MIT course&lt;/a&gt;. This is a course about lisp and the basics of computer science, based on one of the most influential books in CS - &lt;a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;(algorithms, data structures, complexity)&lt;/p&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.metacademy.org/"&gt;Metacademy&lt;/a&gt; - a "package manager" for your knowledge. You can use this great tool to understand all the prerequisites you need to learn different ML subjects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.kaggle.com/"&gt;kaggle&lt;/a&gt; — Machine Learning competitions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github/my post on datasets&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!--

## Programming
## Prerequisites

### Lisp and Python - best programming languages for AI:
Of all the programming languages you can choose to practice AI there are 2 best
options: Lisp and Python. Lisp was created specifically for creating AI, and it
is widely considered to be the most elegant and brilliant programming language
ever.  

Here's the best way to learn it:  

- Book "[Land of Lisp](http://www.amazon.com/Land-Lisp-Learn-Program-Game/dp/1593272812/)"
  (Book about lisp with some AI algorithms)  
  This is an excellent and very fun introduction to lisp, makes learning very
  enjoyable, understandable, and includes a lot of algorithms and basic principles
  that will be very useful when you will be going throuhg AIMA.  


- Paul Graham [ANSI Common Lisp](http://www.amazon.com/ANSI-Common-LISP-Paul-Graham/dp/0133708756)

And here's my favorite book on python:  


 --&gt;

&lt;style&gt;
a {
    color: #3d454b;
    font-weight: bold;
}
&lt;/style&gt;</summary></entry><entry><title>Getting started with Web Development</title><link href="/post/getting-started-with-web-development" rel="alternate"></link><updated>2014-11-01T00:00:00+01:00</updated><author><name>Ray Alez</name></author><id>tag:,2014-11-01:post/getting-started-with-web-development</id><summary type="html">&lt;p&gt;Recently I've got a question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Where did you learn web development? What is the best way to get started in web development?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's my response:&lt;/p&gt;
&lt;p&gt;I've learned everything from books, video courses and by creating my own projects.
And I think that it is the absolutely best way to go about it.
All the information that you need is available for free on the internet, so you can learn everything just by using free(or very cheap) resources and practicing.&lt;/p&gt;
&lt;p&gt;If you are starting from the absolute zero - I would suggest to just create a wordpress website and mess around with it, make and customize a blog for yourself or whatever you like, go from there. It is extremely easy to do, you will get your first experiences, and learn the basics of web development by osmosis.&lt;/p&gt;
&lt;p&gt;Once you have done that - set out to learn and understand some basic skills.
Here's the skills that you will need:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn html and css&lt;/strong&gt;
It is the easiest thing to understand, you will learn it quickly, and enjoy the instant satisfaction of being able to create some pretty web pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn the basics of javascript&lt;/strong&gt;
Simply put, javascript is what lets you to create all the animations and moving objects on the web pages(and much, much more). Learn and understand the basics first, to be able to manipulate simple elements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn some backend programming language, and a framework.&lt;/strong&gt;
Backend programming language is what lets you to create things like blogs and forums, this is what automatically generates pages on the "server side"(as opposed to the "client side" - in your browser).&lt;/p&gt;
&lt;p&gt;I suggest to learn &lt;strong&gt;Python and Django&lt;/strong&gt;.
There are alternatives to that - like Ruby and Ruby on Rails, or a sad old php.
But python is considered to be the best programming language for beginners, and it is used everywhere(even bitvid is created with it), it has a huge amount of tutorials and information, and you can apply it in any field.
It is easy to learn and understand, it is elegant, beautiful, and it is awesome. So you can't go wrong with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; Learn the basics of database administration and sql.&lt;/strong&gt;
Just to understand what that is and what you can use it for.&lt;/p&gt;
&lt;p&gt;Once you've done that - you will have a very solid foundation, and the kind of things that you are capable of creating will depend only on your experience. You will be able to start freelancing or making some projects for yourself and your friends, building portfolio, gaining some experience, and becoming more advanced.&lt;/p&gt;
&lt;p&gt;It may seem like a lot - but don't worry about it, it will be much easier than it seems, and it is &lt;strong&gt;extremely&lt;/strong&gt; fun.&lt;/p&gt;
&lt;p&gt;You will also need to learn to use a bunch of tools, like a good text editor(start with sublime, move on to emacs or vim), git, vagrant, apache, etc - but don't worry about these things for now, you will naturally learn them when you will need to.&lt;/p&gt;
&lt;p&gt;Here's some great resources for you to get started:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code School&lt;/strong&gt; (codeschool.com)&lt;/p&gt;
&lt;p&gt;It is not free, but it is relatively cheap, and it is the fastest and easiest way to learn the basics of HTML, CSS, and Javascript that I know. Of course you can find plenty of free courses on the youtube and on torrents.
&lt;strong&gt;Bucky Roberts&lt;/strong&gt; - Here's a fantastic youtube channel created by a great guy, who will teach you most of it for free:
https://www.youtube.com/user/thenewboston/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can learn the basics of python from Bucky Roberts as well, or - you can go through the course "Learn Python the Hard Way" - despite it's name it is the easiest way to learn python that I'm aware of.
Or you could just google and find enormous amount of information and free courses, and pick whichever one you like the most.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tuts+ and Django Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(go into this only after learning html/css/js)
http://courses.tutsplus.com/courses/django-unchained
Again, not free, but they have my favorite introductory course to django. You will learn it from the basics by creating your own hackernews clone - it is awesome and easy to follow.
Or you can star with the official documentation - it is written extremely well, and contains a great tutorial for beginners (docs.djangoproject.com)
After that you can read a great book "2 Scoops of Django".&lt;/p&gt;
&lt;p&gt;That's pretty much it) This is the best way(that I'm aware of) for going from absolute zero to a solid intermediate(of course if you will practice and gain experience by making your own projects in the process).&lt;/p&gt;
&lt;p&gt;I hope that gives you the general idea. At least this is the kind of post I would like to read 2-3 years ago. If anything is confusing or you have more questions - please ask, I will be happy to answer =)&lt;/p&gt;</summary></entry></feed>